%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np
from numpy import *
import pandas as pd
import math
import time
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from sklearn.preprocessing import FunctionTransformer
from sklearn.naive_bayes import MultinomialNB
from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
from sklearn.pipeline import make_pipeline
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.utils.multiclass import unique_labels

#FILE PATH: ('/home/USERNAME/FOLDERNAME/NAME_OF_FILE')
sldf = pd.read_excel('/home/sanbornc2/DataScienceFinal/Sea Level Chart.xlsx')
icdf = pd.read_excel('/home/sanbornc2/DataScienceFinal/Ice Cap Levels.xlsx')
cvdf = pd.read_excel('/home/sanbornc2/DataScienceFinal/Converted DataSheet.xlsx')
print(icdf.head(5))
 
start = time.time()

arr = np.ones(icdf['ICE EXTENT'].size)
arr2 = np.zeros(icdf['ICE AREA'].size)
design = np.concatenate((arr,arr2))

def data_plot(icdf, sldf, cvdf):
    #replace all NaN values with 0
    cvdf[isnan(cvdf)] = 0

    #display graphs using specific dataset
    f1 = plt.figure(1)
    #resizes plot
    plt.figure(figsize=(10,10))
    iceCapScat = plt.scatter(icdf.iloc[:,0], icdf['ICE EXTENT'], color='red')
    #display best fit line
    plt.plot(np.unique(icdf.iloc[:,0]), np.poly1d(np.polyfit(icdf.iloc[:,0], icdf['ICE EXTENT'], 1))(np.unique(icdf.iloc[:,0])))
    plt.title('Ice Cap')
    plt.xlabel('Year')
    plt.ylabel('Ice Extent')
    f1.show()
    
    f2 = plt.figure(2)
    #resizes plot
    plt.figure(figsize=(10,10))
    seaLevelScat = plt.scatter(sldf.iloc[:,0], sldf['CSIRO - Adjusted sea level (inches)'], color='yellow')
    #display best fit line
    plt.plot(np.unique(sldf.iloc[:,0]), np.poly1d(np.polyfit(sldf.iloc[:,0], sldf['CSIRO - Adjusted sea level (inches)'], 1))(np.unique(sldf.iloc[:,0])))
    plt.title('Sea Level')
    plt.xlabel('Year')
    plt.ylabel('CSIRO - Adjusted sea level (inches)')
    f2.show()
    
    f3 = plt.figure(3)
    #resizes plot
    plt.figure(figsize=(10,10))
    convertScat = plt.bar(cvdf.iloc[:,0], cvdf['Monthly Anomaly'], color='purple')
    plt.title('Average Monthly Temperature Anomaly Bar Graph')
    plt.xlabel('Year (Each Month)')
    plt.ylabel('Monthly Anomaly')
    f3.show()
    
    f4 = plt.figure(4)
    #resizes plot
    plt.figure(figsize=(10,10))
    convertScat = plt.scatter(cvdf.iloc[:,0], cvdf['Monthly Anomaly'], color='purple')
    #display best fit line
    plt.plot(np.unique(cvdf.iloc[:,0]), np.poly1d(np.polyfit(cvdf.iloc[:,0], cvdf['Monthly Anomaly'], 1))(np.unique(cvdf.iloc[:,0])))
    plt.title('Average Monthly Temperature Anomaly Scatter Plot')
    plt.xlabel('Year (Each Month)')
    plt.ylabel('Monthly Anomaly')
    f4.show()
    
    f5 = plt.figure(5)
    plt.figure(figsize=(10,10))
    iceCapScat = plt.scatter(icdf.iloc[:,0], icdf['ICE AREA'], color='green')
    plt.plot(np.unique(icdf.iloc[:,0]), np.poly1d(np.polyfit(icdf.iloc[:,0], icdf['ICE AREA'], 1))(np.unique(icdf.iloc[:,0])))
    plt.title('Ice Cap')
    plt.xlabel('Year')
    plt.ylabel('Ice Area')
    f5.show()
    
    y = designY(icdf['ICE AREA'], icdf['ICE EXTENT'])
    X_train, X_test, y_train, y_test = train_test_split(cvdf.iloc[:,0], design, random_state=0, test_size=0.5)
    model = make_pipeline(CountVectorizer(), MultinomialNB())
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
  
#print execution time of program
end = time.time()
print('Execution time for program = ', end - start)
    
data_plot(icdf, sldf, cvdf)
print("Train accuracy is %.2f %%" % (model.score(X_train, y_train)*100))
print("Test accuracy is %.2f %%" % (model.score(X_test, y_test)*100))
